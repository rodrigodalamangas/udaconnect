# Architecture Design:

To understand and make all the changes for this project I built two dependency graphs, the first one with the Previous architecture design (previous_architecture_design.png) and the last one with the new architecture (architecture_design.png).

# Previous Application:

According to the previous architecture design the application is composed of an api and a frontend app. The frontend connects to the api through the Persons Route and the Connections Route. The api had 3 routes (Locations, Persons and Connection) and each route had its own service and only the Connections Service depends on the Person Service. The Location Route would be used for an mobile app to collect locations data.

# Current Application:

For the design of the new architecture, the routes and their respective services were separated into their own REST Apis(Locations Api, Persons Api and Connections Api). The reason REST Api was adopted as endpoint to communicate with the frontend and mobile app is because  REST is the current industry standard and its wide adoption.

To handle the large volume of location data that will be generated by the mobile app, a Kafka message queue has been implemented to process the data sent by Locations Api before the location consumer stores it in the database.The message queue stores these events and allows the database to store them at its own cadence, allowing the service to be persistent and reliable.

Finally, for the internal communication between the Person Service and the Connection Service, a gRPC microservice(Person gRPC) was implemented to impose a certain message structure and because the gRPC protocol is faster than REST protocol.

